import logging
import aiohttp  # –î–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
import asyncio

# –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω —Ç–≤–æ–µ–≥–æ –±–æ—Ç–∞
TOKEN = "8060036697:AAGakBUZ_Xa8HTZzhy0uub4GNk2mmw8wM7Q"  # –í—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω

# –°–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç
coins = {
    "bitcoin": "BTC",
    "ethereum": "ETH",
    "binancecoin": "BNB",
    "cardano": "ADA",
    "ripple": "XRP"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ Binance
async def get_binance_price(symbol):
    url = f"https://api.binance.com/api/v3/ticker/price?symbol={symbol}USDT"
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(url) as response:
                data = await response.json()
                return float(data["price"]) if "price" in data else None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ Binance: {e}")
            return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ CoinGecko
async def get_coingecko_price(symbol):
    url = f"https://api.coingecko.com/api/v3/simple/price?ids={symbol}&vs_currencies=usd"
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(url) as response:
                data = await response.json()
                return data.get(symbol, {}).get("usd")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ CoinGecko: {e}")
            return None

# –ö–æ–º–∞–Ω–¥–∞ /start —Å –∫–Ω–æ–ø–∫–∞–º–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üìä –£–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã", callback_data="get_prices")],
        [
            InlineKeyboardButton("üåê Binance", url="https://www.binance.com/"),
            InlineKeyboardButton("üåç CoinGecko", url="https://www.coingecko.com/")
        ],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–∫–∞–∑—ã–≤–∞—é —Ü–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–µ–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
async def get_prices(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Å–µ —Ü–µ–Ω—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    binance_tasks = {symbol: get_binance_price(ticker) for symbol, ticker in coins.items()}
    coingecko_tasks = {symbol: get_coingecko_price(symbol) for symbol in coins.keys()}

    binance_prices = await asyncio.gather(*binance_tasks.values())
    coingecko_prices = await asyncio.gather(*coingecko_tasks.values())

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π
    message = "üìà <b>–¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:</b>\n\n"
    buttons = []

    for (coingecko_symbol, binance_symbol), binance_price, coingecko_price in zip(coins.items(), binance_prices, coingecko_prices):
        if binance_price and coingecko_price:
            diff = abs(binance_price - coingecko_price)
            percent_diff = (diff / binance_price) * 100
            message += (
                f"üîπ <b>{binance_symbol}</b>\n"
                f"üìå Binance: <code>{binance_price:.2f}$</code>\n"
                f"üìå CoinGecko: <code>{coingecko_price:.2f}$</code>\n"
                f"‚öñ –†–∞–∑–Ω–∏—Ü–∞: <code>{diff:.2f}$ ({percent_diff:.2f}%)</code>\n\n"
            )

            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–Ω–µ—Ç—ã
            buttons.append([
                InlineKeyboardButton(f"üìà {binance_symbol} –Ω–∞ Binance", url=f"https://www.binance.com/en/trade/{binance_symbol}_USDT"),
                InlineKeyboardButton(f"üìä {binance_symbol} –Ω–∞ CoinGecko", url=f"https://www.coingecko.com/en/coins/{coingecko_symbol}")
            ])

    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="start")])
    reply_markup = InlineKeyboardMarkup(buttons)

    await query.message.edit_text(message, reply_markup=reply_markup, parse_mode="HTML")

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="start")])
    reply_markup = InlineKeyboardMarkup(buttons)

    await query.message.edit_text(message if message.strip() else "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö üò¢", reply_markup=reply_markup)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã –ø–æ–º–æ—â–∏
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if query:
        await query.answer()
        await query.message.edit_text(
            "‚Ñπ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üìå\n"
            "/prices - –£–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç üìà\n",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="start")]])
        )
    else:
        await update.message.reply_text(
            "‚Ñπ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üìå\n"
            "/prices - –£–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç üìà\n",
            parse_mode="HTML"
        )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = ApplicationBuilder().token(TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("prices", get_prices))
    app.add_handler(CommandHandler("help", help_command))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
    app.add_handler(CallbackQueryHandler(get_prices, pattern="get_prices"))
    app.add_handler(CallbackQueryHandler(help_command, pattern="help"))
    app.add_handler(CallbackQueryHandler(start, pattern="start"))

    app.run_polling()

if __name__ == "__main__":
    import asyncio
    main()
